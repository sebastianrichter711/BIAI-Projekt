# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '.\gui.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets, QtChart
import os
import model

class Ui_MainWindow(QtWidgets.QWidget):
    #setup window (generated based on QtDesigner file)
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(950, 614)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.chartWidget = QtChart.QChartView()
        self.chartWidget.setMinimumSize(QtCore.QSize(500, 500))
        self.chartWidget.setObjectName("chartWidget")
        self.gridLayout.addWidget(self.chartWidget, 0, 0, 1, 1)
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.pointList = QtWidgets.QListWidget(self.centralwidget)
        self.pointList.setObjectName("pointList")
        self.verticalLayout.addWidget(self.pointList)
        self.loadBtn = QtWidgets.QPushButton(self.centralwidget)
        self.loadBtn.setObjectName("loadBtn")
        self.verticalLayout.addWidget(self.loadBtn)        
        self.simulateBtn = QtWidgets.QPushButton(self.centralwidget)
        self.simulateBtn.setObjectName("simulateBtn")
        self.verticalLayout.addWidget(self.simulateBtn)
        self.gridLayout.addLayout(self.verticalLayout, 0, 1, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 950, 22))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        #create signal for button click
        self.loadBtn.clicked.connect(self.handleInput)
        self.simulateBtn.clicked.connect(self.handlePredict)
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.model = model.Simulation_model()
    
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "PointPrediction"))
        self.loadBtn.setText(_translate("MainWindow", "Load data"))
        self.simulateBtn.setText(_translate("MainWindow", "Predict"))

    #update list of parsed data in the gui
    def updatePointList(self):
        self.pointList.clear()
        x_pts = self.model.input_x_values
        y_pts = self.model.all_data
        for x, y in zip(x_pts, y_pts):
            self.pointList.addItem(f"X: {x}; Y: {y}")

    #create line chart of simulation
    def updateGraph(self):
        #create line series objects
        input_series = QtChart.QLineSeries()
        output_series = QtChart.QLineSeries()
        input_series.setName("Input position")
        output_series.setName("Predicted position")

        #get data from the model class and parse them into both series
        x_input_pts = self.model.input_x_values
        y_input_pts = self.model.all_data        
        x_output_pts = self.model.output_x_values
        y_output_pts = self.model.predicted_points

        for x, y in zip (x_input_pts, y_input_pts):
            input_series.append(x, y)
        for x, y in zip (x_output_pts, y_output_pts):
            output_series.append(x, y)
        
        #create chart widget and hook it up to gui
        chart = QtChart.QChart()
        chart.setTitle("Point movement prediction")
        chart.addSeries(input_series)
        chart.addSeries(output_series)
        chart.createDefaultAxes()
        chart.setAnimationOptions(QtChart.QChart.SeriesAnimations)
        chart.setTheme(QtChart.QChart.ChartThemeBlueCerulean)

        self.chartWidget.setChart(chart)
        


    #displays file explorer window, reads selected data and starts simulation
    def handleInput(self):
        file_path = QtWidgets.QFileDialog.getOpenFileName(self, "Select data", os.getcwd(), "*.txt")
        if file_path[0] != '' and self.model.read_data(file_path[0]):
            self.updatePointList()
        else:
            message_box = QtWidgets.QMessageBox(self)
            message_box.setText(u"Invalid input data")
            message_box.setWindowTitle(u"Error")
            message_box.show()
    def handlePredict(self):
        if self.model.is_data_loaded():
            self.model.simulate()
            self.updateGraph()
        else:
            message_box = QtWidgets.QMessageBox(self)
            message_box.setText(u"Please load some data...")
            message_box.setWindowTitle(u"Error")
            message_box.show()



#main function
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())